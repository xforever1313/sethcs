<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#+
// Start of class feature control block.  No empty new lines allowed before this line.
string ExecuteGit( string arguments, string workingDir )
{
    ProcessStartInfo startInfo = new ProcessStartInfo
    {
        Arguments = arguments,
        CreateNoWindow = true,
        FileName = "git",
        UseShellExecute = false,
        RedirectStandardOutput = true,
        WorkingDirectory = workingDir
    };

    string stdOut;
    using( Process process = new Process() )
    {
        process.StartInfo = startInfo;
        process.Start();

        stdOut = process.StandardOutput.ReadToEnd().Trim();
        process.WaitForExit();

        if( process.ExitCode != 0 )
        {
            throw new ApplicationException( $"'git {arguments}' exited with error code: " + process.ExitCode );
        }
    }

    return stdOut;
}

string GetHeadTimeStamp( string workingDir )
{
    try
    {
        return ExecuteGit( "show -s --format=%cI", workingDir );
    }
    catch( Exception e )
    {
        return "Unknown.  Failed due to: " + e.Message;
    }
}

string GetRevNumber( string workingDir )
{
    try
    {
        return ExecuteGit( "rev-list --count HEAD", workingDir );
    }
    catch( Exception e )
    {
        return "Unknown.  Failed due to: " + e.Message;
    }
}

string GetBranch( string workingDir )
{
    try
    {
        return ExecuteGit( "rev-parse --abbrev-ref HEAD", workingDir );
    }
    catch( Exception e )
    {
        return "Unknown.  Failed due to: " + e.Message;
    }
}

string GetHash( string workingDir )
{
    try
    {
        return ExecuteGit( "rev-parse HEAD", workingDir );
    }
    catch( Exception e )
    {
        return "Unknown.  Failed due to: " + e.Message;
    }
}

void GenerateGitBuildInfo( string theNamespace, string rootDirectory )
{
    string workingDir = this.Host.ResolvePath( rootDirectory );
#>
// AutoGenerated at compile time.  Do not modify, as it won't stick around.
using System;
using System.Text;

namespace <#= theNamespace #>
{
    internal class BuildInfo
    {
        // ---------------- Fields ----------------

        /// <summary>
        /// The compile time that this was built.
        /// Null for unknown (something went wrong).
        /// </summary>
        public readonly DateTime? CompileTime;

        /// <summary>
        /// The build string from git.  Note that git outputs local time.
        /// Could be an error message too.
        /// </summary>
        public readonly string HeadRevisionTimeFromGit;

        /// <summary>
        /// The build time.  Set to null if we could not get
        /// the time, in which case, <see cref="HeadRevisionTimeFromGit"/>
        /// will contain the error message.
        /// </summary>
        public readonly DateTime? HeadRevisionTimeUtc;

        /// <summary>
        /// The rev number from git, in the form of the string.
        /// Could be an error message too.
        /// <summary>
        public readonly string RevNumberFromGit;

        /// <summary>
        /// Like an SVN rev, only the number of commits since the first commit
        /// on the CURRENT branch.
        /// If null, it means we could not read from git, and the error message
        /// is stored in <see cref="RevNumberFromGit" />
        /// </summary>
        public readonly int? GitRevNumber;

        /// <summary>
        /// The current git branch this was built on.
        /// </summary>
        public readonly string GitBranch;

        /// <summary>
        /// The HASH of the git commit this was built on.
        /// </summary>
        public readonly string GitHash;

        // ---------------- Constructor ----------------

        public BuildInfo()
        {
            {
                string compileTimeStr = "<#=DateTime.UtcNow.ToString( "O" )#>";
                DateTime parsedCompileTime;
                if( DateTime.TryParse( compileTimeStr, out parsedCompileTime ) )
                {
                    this.CompileTime = parsedCompileTime;
                }
            }

            {
                this.HeadRevisionTimeFromGit = "<#=GetHeadTimeStamp( workingDir )#>";
                DateTime parsedHeadRevisionTime;
                if( DateTime.TryParse( this.HeadRevisionTimeFromGit, out parsedHeadRevisionTime ) )
                {
                    this.HeadRevisionTimeUtc = parsedHeadRevisionTime.ToUniversalTime();
                }
            }

            {
                this.RevNumberFromGit = "<#=GetRevNumber( workingDir )#>";
                int gitRev;
                if( int.TryParse( this.RevNumberFromGit, out gitRev ) )
                {
                    this.GitRevNumber = gitRev;
                }
            }

            this.GitBranch = "<#=GetBranch( workingDir )#>";
            this.GitHash = "<#=GetHash( workingDir )#>";
        }

        // ---------------- Functions ----------------

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            
            builder.AppendLine( "<#= theNamespace #> build info:" );
            builder.AppendLine( "\t-Compile Time: " + (this.CompileTime?.ToLocalTime().ToString() ?? "Unknown" ) );
            builder.AppendLine( "\t-Git Branch: " + this.GitBranch );
            builder.AppendLine( "\t-Git latest commit time: " + ( this.HeadRevisionTimeUtc?.ToLocalTime().ToString() ?? "Unknown" ) );
            builder.AppendLine( "\t-Git HASH: " + this.GitHash );
            builder.AppendLine( "\t-Git revision Number: " + ( this.GitRevNumber?.ToString() ?? "Unknown" ) );

            return builder.ToString();
        }
    }
}

<#+
}
#>